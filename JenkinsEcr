@Library('my-shared-library') _

pipeline{

    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'project', description: "name of the ecr repo name", defaultValue: 'java_app')
        string(name: 'accountid', description: "name of the aws account id", defaultValue: '637423367353')
        string(name: 'region', description: "name of the Application", defaultValue: 'ap-south-1')
    }

    environment{
        aws_access_key = credentials('Access_key_ID')
        aws_secret_key = credentials('Secret_access_key')
    }

    stages{
         
        stage('Git Checkout :Git'){
                    when { expression {  params.action == 'create' } }
            steps{
            gitcheckout(
                branch: "main",
                url: "https://github.com/iamprakash89/java_application.git"
            )
            }
        }
        //  stage('Unit Test :Maven'){
         
        //  when { expression {  params.action == 'create' } }

        //     steps{
        //        script{
                   
        //            mvnTest()
        //        }
        //     }
        // }
        //  stage('Integration Test  : Maven'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            mvnintegrationtest()
        //        }
        //     }
        // }

        // stage('Statc Code Analysis :Sonarqube'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            staticcodeAnalysis()
        //        }
        //     }
        // }

        // stage('Quality Gate Analysis :Sonarqube'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            QualityGateStatus()
        //        }
        //     }
        // }

        // stage('Maven Build :Maven'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            mvnBuild()
        //        }
        //     }
        // }

        

        // stage('Docker Image Build: ECR'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            dockerbuild("${params.project}","${params.accountid}","${params.region}")
        //        }
        //     }
        // }

        // stage('Docker Image scan :Trivy'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            dockerimagescan("${params.project}","${params.accountid}","${params.region}")
        //        }
        //     }
        // }

        // stage('Docker Image push: ECR'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            dockerpush("${params.project}","${params.accountid}","${params.region}")
        //        }
        //     }
        // }

        // stage('Docker Image clanup: ECR'){
        //  when { expression {  params.action == 'create' } }
        //     steps{
        //        script{
                   
        //            dockerimagecleanup("${params.project}","${params.accountid}","${params.region}")
        //        }
        //     }
        // }

        stage('Create EKS Cluster: TerraForm'){
            steps{
                script{
                    dir('eks_module') {
                        sh """

                        terraform init
                        terraform plan -var "access_key=$aws_access_key" -var "secret_key=$aws_secret_key" -var "region=${params.region}" -var-file=./config/terraform.tfvars
                        terraform plan -var "access_key=$aws_access_key" -var "secret_key=$aws_secret_key" -var "region=${params.region}" -var-file=./config/terraform.tfvars -auto-approve
                        """
                    }
                }
            }
        }
    }
}